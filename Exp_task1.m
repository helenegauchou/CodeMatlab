function Exp_task1(target_case,target_presence,setsize,target_key_side,stress)global win0 win1 winclearglobal detection_response accuracy response_time response_time_log excentricity quadrant %imageArrayglobal_settings;% Shapes parametersshapes = {'tilted_line_left','tilted_line_right','vertical_line'}; % target = oblique line, distractors = vertical linesshape_fixation_dot = 'disc';% Creates the 16 possible spatial locations within a 4 by 4 matrixitem_max_width = 2*(sind(settings.TILT_ANGLE_TARGET)*(settings.INTER_DOTS_DISTANCE + settings.DOTS_DIAMETER));item_max_heigth = 3*settings.DOTS_DIAMETER+2*settings.INTER_DOTS_DISTANCE;freed_h = round(settings.WIDTH_CELL - settings.MINIMAL_INTER_ITEM_DISTANCE - item_max_width);freed_v = round(settings.WIDTH_CELL - settings.MINIMAL_INTER_ITEM_DISTANCE - item_max_heigth);xnoise=randperm(freed_h);ynoise=randperm(freed_v);l=0;for x=1:4    for y=1:4        l=l+1;        xloc(x) = settings.SCREEN_X/2 - 3*settings.WIDTH_CELL + x*settings.WIDTH_CELL;        yloc(y) = settings.SCREEN_Y/2 - 2*settings.WIDTH_CELL + y*settings.WIDTH_CELL;                xpositions(l) = xloc(x) + settings.MINIMAL_INTER_ITEM_DISTANCE/2 + xnoise(l);        ypositions(l) = yloc(y) - settings.MINIMAL_INTER_ITEM_DISTANCE/2 - ynoise(l);                matloc(l,:)=[xpositions(l),ypositions(l)];        matlocperm=matloc(randperm(l),:) ;    endend%%% prepares screen's items' color and shapespermstsz = randperm(setsize);target = permstsz(1); %defines target% prepares win1for i=1:setsize    if i ~= target        drawshapes(win1,shapes{3},matlocperm(i,1),matlocperm(i,2),settings.NON_TARGETS_COLOR);    end    if i == target            drawshapes(win1,shapes{target_case},matlocperm(i,1),matlocperm(i,2),settings.TARGET_COLOR)    endend%%% express target's location with center of the screen as reference, for participant's dataX_loc_target = (matlocperm(target,1) - settings.SCREEN_X/2)/settings.CM;Y_loc_target = (matlocperm(target,2) - settings.SCREEN_Y/2)/settings.CM;excentricity = ceil(sqrt(X_loc_target^2 + Y_loc_target^2));half_screen_X = 1;half_screen_Y = 0;if (X_loc_target > 0)    half_screen_X = 2;endif (Y_loc_target > 0)    half_screen_Y = 2;endquadrant = half_screen_X + half_screen_Y;if target_presence == 0    excentricity = 99;    quadrant = 99;end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   EXPERIMENT BEGINS HERE   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% FIX point ****************************************************************************************************************************************************************************************drawshapes(win0,shape_fixation_dot,(settings.SCREEN_X/2)-2,(settings.SCREEN_Y/2)-2,settings.FIX_POINT_COLOR);Screen(win0,'WaitBlanking',settings.REFRESH_RATE/4);% BLACK screen **************************************************************************************************************************************************Screen('CopyWindow',winclear,win0);Screen(win0,'WaitBlanking',settings.REFRESH_RATE/4);% TEST Screen ***************************************************************************************************************************************************************************************FlushEvents('keyDown'); % or drawnowScreen('CopyWindow',win1,win0);ticwhile 1    if KbCheck == 1        response_time = toc*1000;        key = GetChar;        if (key == 'q')||(key == 'Q')||(key == 'm')||(key == 'M')            break        end    endendresponse_time_log = log10(response_time);Screen('CopyWindow',winclear,win0);if target_key_side == 0if ((key == 'q') || (key == 'Q')) % If the participant hit the q/Q key    identification_response = 1; % user reports target tilted leftendif ((key == 'm') || (key == 'M')) % If the participant hit the m/M key    identification_response = 2; % user reports target tilted rightendendif target_key_side == 1if ((key == 'q') || (key == 'Q')) % If the participant hit the q/Q key    identification_response = 2; % user reports target tilted rightendif ((key == 'm') || (key == 'M')) % If the participant hit the m/M key    identification_response = 1; % user reports target tilted leftendendaccuracy = 0;if identification_response == target_case    accuracy = 1;endif accuracy == 1    Screen(win0,'WaitBlanking',settings.REFRESH_RATE*2/3);%%%% test fait "passer" KbCheck de 1 a 0else % ERROR MESSAGE ***************************************************************************************************************************************************************************************        if stress == 0        message ='X X X X X X X';        error_message_color = settings.LETTER_COLOR;    else        message = '!!! WRONG !!!';        error_message_color = settings.LETTER_COLOR_STRESS;    end    Screen(win0,'TextFont',settings.LETTER_FONT);    Screen(win0,'TextSize',44);    Screen(win0,'DrawText',message,(settings.SCREEN_X/2)-(3.65*settings.CM),(settings.SCREEN_Y/2)+(settings.CM/3),error_message_color);    Screen(win0,'WaitBlanking',settings.REFRESH_RATE/3);endScreen('CopyWindow',winclear,win1);Screen('CopyWindow',winclear,win0);end