function Exp(task,target_case,target_presence,setsize,first_VS_task,target_key_side,stress)global win0 win1 win2 winclear winnoiseglobal response_detection response_identification accuracy_detection accuracy_identificationglobal response_time response_time_log excentricity quadrantglobal DIPLAY_DURATION BLANK_DURATIONglobal_settings;if task == 1    % Shapes parameters    shapes = {'tilted_line_left','tilted_line_right','vertical_line'}; % target = tilted lines, distractors = vertical lines    shape_fixation_dot = 'disc';        % Creates the 16 possible spatial locations within a 4 by 4 matrix    item_max_width = settings.LENGTH_SHORT_LINE;    item_max_heigth = settings.LENGTH_LONG_LINE;        freed_h = round(settings.WIDTH_CELL - settings.MINIMAL_INTER_ITEM_DISTANCE - item_max_width);    freed_v = round(settings.WIDTH_CELL - settings.MINIMAL_INTER_ITEM_DISTANCE - item_max_heigth);    xnoise=randperm(freed_h);    ynoise=randperm(freed_v);        l=0;    for x=1:4        for y=1:4            l=l+1;            xloc(x) = settings.SCREEN_X/2 - 3*settings.WIDTH_CELL + x*settings.WIDTH_CELL;            yloc(y) = settings.SCREEN_Y/2 - 2*settings.WIDTH_CELL + y*settings.WIDTH_CELL;                        xpositions(l) = xloc(x) + settings.MINIMAL_INTER_ITEM_DISTANCE/2 + xnoise(l);            ypositions(l) = yloc(y) - settings.MINIMAL_INTER_ITEM_DISTANCE/2 - ynoise(l);                        matloc(l,:)=[xpositions(l),ypositions(l)];            matlocperm=matloc(randperm(l),:) ;        end    end        %%% prepares screen's items' color and shapes    permstsz = randperm(setsize);    target = permstsz(1); %defines target        % prepares win1 & win2    if target_case == settings.CASE_LEFT_TILT;        for i=1:setsize            if i == target                drawshapes(win1,shapes{1},matlocperm(i,1),matlocperm(i,2),settings.TARGET_COLOR);            else                drawshapes(win1,shapes{3},matlocperm(i,1),matlocperm(i,2),settings.NON_TARGETS_COLOR);            end        end    end    if target_case == settings.CASE_RIGHT_TILT;        for i=1:setsize            if i == target                drawshapes(win1,shapes{2},matlocperm(i,1),matlocperm(i,2),settings.TARGET_COLOR);            else                drawshapes(win1,shapes{3},matlocperm(i,1),matlocperm(i,2),settings.NON_TARGETS_COLOR);            end        end    end        %%% express target's location with center of the screen as reference, for participant's data        X_loc_target = (matlocperm(target,1) - settings.SCREEN_X/2)/settings.CM;    Y_loc_target = (matlocperm(target,2) - settings.SCREEN_Y/2)/settings.CM;    excentricity = ceil(sqrt(X_loc_target^2 + Y_loc_target^2));        half_screen_X = 1;    half_screen_Y = 0;        if (X_loc_target > 0)        half_screen_X = 2;    end    if (Y_loc_target > 0)        half_screen_Y = 2;    end    quadrant = half_screen_X + half_screen_Y;            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% TRIAL BEGINS HERE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        % FIX point ***********************************************************    drawshapes(win0,shape_fixation_dot,(settings.SCREEN_X/2)-2,(settings.SCREEN_Y/2)-2,settings.FIX_POINT_COLOR);    Screen(win0,'WaitBlanking',settings.REFRESH_RATE/4);        % BLACK screen ********************************************************    Screen('CopyWindow',winclear,win0);    Screen(win0,'WaitBlanking',settings.REFRESH_RATE/4);        % VISUAL SEARCH Screen ************************************************    FlushEvents('keyDown');    invalid_key = 0;    Screen('CopyWindow',win1,win0);    display_start_time = tic;    while 1        if KbCheck == 1            response_time = (toc(display_start_time))*1000;            key = GetChar;            if (lower(key) ~= settings.LEFT_RESPONSE_KEY)&&(lower(key) ~= settings.RIGHT_RESPONSE_KEY)                invalid_key = 1;                response_time = 99;            end            break        end    end    response_time_log = log10(response_time);    Screen('CopyWindow',winclear,win0); % END of test visual search screen        % response coding -----------------------------------------------------    response_detection = 98;    response_identification = 99;        if target_key_side == 0        if lower(key) == settings.LEFT_RESPONSE_KEY            response_identification = settings.CASE_LEFT_TILT;  % = User reported a LEFT TILTED target        end        if lower(key) == settings.RIGHT_RESPONSE_KEY            response_identification = settings.CASE_RIGHT_TILT; % = User reported a RIGHT TILTED target        end    end    if target_key_side == 1        if lower(key) == settings.LEFT_RESPONSE_KEY            response_identification = settings.CASE_RIGHT_TILT; % = User reported a RIGHT TILTED target        end        if lower(key) == settings.RIGHT_RESPONSE_KEY            response_identification = settings.CASE_LEFT_TILT;  % = User reported a LEFT TILTED target        end    end        % accuracy coding -----------------------------------------------------    % detection    accuracy_detection = 98; % because here no detection involved, only identification    % identification    accuracy_identification = response_identification == target_case;    if invalid_key == 1        accuracy_identification = 99; % invalid trial    end    elseif task == 2 %££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££        % Shape list % *******************************************************************************************************************************    shapes = {'short_line','long_line','T_bar_left','T_bar_right'}; % target = oblique line, distractors = vertical lines    shape_fixation_dot = 'disc';        % Spatial locations for items ****************************************************************************************************************        % Creates 16 possible spatial locations within a 4 by 4 matrix ------------    item_max_width = settings.LENGTH_SHORT_LINE; % A MODIFIER    item_max_heigth = settings.LENGTH_LONG_LINE;        freed_h = round(settings.WIDTH_CELL - settings.MINIMAL_INTER_ITEM_DISTANCE - item_max_width);    freed_v = round(settings.WIDTH_CELL - settings.MINIMAL_INTER_ITEM_DISTANCE - item_max_heigth);    xnoise=randperm(freed_h);    ynoise=randperm(freed_v);        l=0;    for x=1:4        for y=1:4            l=l+1;            xloc_1(x) = settings.SCREEN_X/2 - 3*settings.WIDTH_CELL + x*settings.WIDTH_CELL;            yloc_1(y) = settings.SCREEN_Y/2 - 2*settings.WIDTH_CELL + y*settings.WIDTH_CELL;                        xpositions_1(l) = xloc_1(x) + settings.MINIMAL_INTER_ITEM_DISTANCE/2 + xnoise(l);            ypositions_1(l) = yloc_1(y) - settings.MINIMAL_INTER_ITEM_DISTANCE/2 - ynoise(l);                        matloc_1(l,:)=[xpositions_1(l),ypositions_1(l)];            matlocperm_1=matloc_1(randperm(l),:) ;        end    end        k=0;    for x=1:4        for y=1:4            k=k+1;            xloc_2(x) = settings.SCREEN_X/2 - 3*settings.WIDTH_CELL + x*settings.WIDTH_CELL;            yloc_2(y) = settings.SCREEN_Y/2 - 2*settings.WIDTH_CELL + y*settings.WIDTH_CELL;                        xpositions_2(k) = xloc_2(x) + settings.MINIMAL_INTER_ITEM_DISTANCE/2 + xnoise(k+settings.MAX_SETSIZE);            ypositions_2(k) = yloc_2(y) - settings.MINIMAL_INTER_ITEM_DISTANCE/2 - ynoise(k+settings.MAX_SETSIZE);                        matloc_2(k,:)=[xpositions_2(k),ypositions_2(k)];            matlocperm_2=matloc_2(randperm(k),:) ;        end    end        % Creates screen's items' color and shapes ******************************************************************************************************    permstsz = randperm(setsize);    target = permstsz(1); % defines target        % draws shapes win1 & win2    if target_presence == 0; % = no target        for i=1:setsize            drawshapes(win1,shapes{1},matlocperm_1(i,1),matlocperm_1(i,2),settings.NON_TARGETS_COLOR);            drawshapes(win2,shapes{3},matlocperm_2(i,1),matlocperm_2(i,2),settings.NON_TARGETS_COLOR);        end    end    if target_case == settings.CASE_LONG_LINE        for i=1:setsize            drawshapes(win2,shapes{3},matlocperm_2(i,1),matlocperm_2(i,2),settings.NON_TARGETS_COLOR);            if i == target                drawshapes(win1,shapes{2},matlocperm_1(i,1),matlocperm_1(i,2),settings.TARGET_COLOR);            else                drawshapes(win1,shapes{1},matlocperm_1(i,1),matlocperm_1(i,2),settings.NON_TARGETS_COLOR);            end        end    end    if target_case == settings.CASE_T        for i=1:setsize            drawshapes(win1,shapes{1},matlocperm_1(i,1),matlocperm_1(i,2),settings.NON_TARGETS_COLOR);            if i ~= target                drawshapes(win2,shapes{3},matlocperm_2(i,1),matlocperm_2(i,2),settings.NON_TARGETS_COLOR);            end            if i == target                drawshapes(win2,shapes{4},matlocperm_2(i,1),matlocperm_2(i,2),settings.TARGET_COLOR);            end        end    end    % blank screen (noise)    load('matrix_noise');    SCREEN(winnoise,'PutImage',matrix_noise,[0 0 settings.SCREEN_X settings.SCREEN_Y]);            % target's location with center of the screen as reference ************    % for data export    if target_presence == 1        if target_case == settings.CASE_LONG_LINE            X_loc_target = (matlocperm_1(target,1) - settings.SCREEN_X/2)/settings.CM;            Y_loc_target = (matlocperm_1(target,2) - settings.SCREEN_Y/2)/settings.CM;            excentricity = ceil(sqrt(X_loc_target^2 + Y_loc_target^2));        end        if target_case == settings.CASE_T            X_loc_target = (matlocperm_2(target,1) - settings.SCREEN_X/2)/settings.CM;            Y_loc_target = (matlocperm_2(target,2) - settings.SCREEN_Y/2)/settings.CM;            excentricity = ceil(sqrt(X_loc_target^2 + Y_loc_target^2));        end                half_screen_X = 1;        half_screen_Y = 0;                if (X_loc_target > 0)            half_screen_X = 2;        end        if (Y_loc_target > 0)            half_screen_Y = 2;        end        quadrant = half_screen_X + half_screen_Y;    end    if target_presence == 0        excentricity = 99;        quadrant = 99;    end        % TRIAL BEGINS HERE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        % FIXATION point ***************************************************************************************************************************    drawshapes(win0,shape_fixation_dot,(settings.SCREEN_X/2)-2,(settings.SCREEN_Y/2)-2,settings.FIX_POINT_COLOR);    Screen(win0,'WaitBlanking',settings.REFRESH_RATE/4);        % BLACK screen *****************************************************************************************************************************    Screen('CopyWindow',winclear,win0);    Screen(win0,'WaitBlanking',settings.REFRESH_RATE/4);        % TEST Screen ******************************************************************************************************************************        FlushEvents('keyDown');    trialend = 0;    invalid_key = 0;    if first_VS_task == 1        first_search = win1;        second_search = win2;    else        first_search = win2;        second_search = win1;    end    trial_start_time = tic;    while 1        for screen_number = 1:4            switch screen_number                case 1                    win = first_search;                    time_limit = DIPLAY_DURATION; %settings.DIPLAY_DURATION;                case {2,4}                                        win = winnoise;                    time_limit = BLANK_DURATION;  %settings.BLANK_DURATION;                otherwise                    win = second_search;                    time_limit = DIPLAY_DURATION; %settings.DIPLAY_DURATION;            end                        Screen('CopyWindow',win,win0);            display_start_time = tic;            while (toc(display_start_time) <= time_limit) && (KbCheck == 0)            end            if KbCheck == 1                response_time = (toc(trial_start_time))*1000;                key = GetChar;                trialend = 1;                if (lower(key) ~= settings.LEFT_RESPONSE_KEY)&&(lower(key) ~= settings.RIGHT_RESPONSE_KEY)&&(key ~= settings.NO_TARGET_KEY)                    invalid_key = 1;                    response_time = 99;                end                break            end                   end        if trialend == 1            break        end      end    Screen('CopyWindow',winclear,win0);    if ((target_case == settings.CASE_LONG_LINE) && (second_search == win1))||...            ((target_case == settings.CASE_T) && (second_search == win2));        response_time = response_time -  DIPLAY_DURATION - BLANK_DURATION;    end    response_time_log = log10(response_time);        % response coding ---------------------------------------------------------    response_detection = 99;    response_identification = 99;    if target_key_side == 0        if key == settings.NO_TARGET_KEY            response_detection = 0;                                 % User didn't detect any target            response_identification = 98;                           % Since no target detected, no identification to report        end        if lower(key) == settings.LEFT_RESPONSE_KEY            response_detection = 1;                                 % User detected a target            response_identification = settings.CASE_LONG_LINE;      % User reported a LONG LINE target        end        if lower(key) == settings.RIGHT_RESPONSE_KEY            response_detection = 1;                                 % User detected a target            response_identification = settings.CASE_T;              % User reported a T target        end    end    if target_key_side == 1        if key == settings.NO_TARGET_KEY            response_detection = 0;                                 % User didn't detect any target            response_identification = 98;                           % Since no target detected, no identification to report        end        if lower(key) == settings.RIGHT_RESPONSE_KEY            response_detection = 1;                                 % User detected a target            response_identification = settings.CASE_LONG_LINE;      % User reported a LONG LINE target        end        if lower(key) == settings.LEFT_RESPONSE_KEY            response_detection = 1;                                 % User detected a target            response_identification = settings.CASE_T;              % User reported a T target        end    end        % accuracy coding -----------------------------------------------------        % detection    accuracy_detection = (target_presence == response_detection);        %identification    accuracy_identification = 98;    if target_presence == 1        accuracy_identification =(response_identification == target_case);    end        if invalid_key == 1        accuracy_detection = 99;        accuracy_identification = 99;    endend% ERROR MESSAGE **********************************************************************************************************************************Screen(win0,'TextFont',settings.LETTER_FONT);Screen(win0,'TextSize',44);error_message_color = settings.LETTER_COLOR;if invalid_key == 1    message = 'INVALID KEY';    elseif task == 1    if accuracy_identification ~= 1        if stress == 0            message ='X X X X X X X';        else            message = '!!! WRONG !!!';            error_message_color = settings.LETTER_COLOR_STRESS;        end    else        message ='O O O O O O O O';    endelseif task == 2    if ((target_presence == 1)&&(accuracy_identification == 0))||((target_presence == 0)&&(accuracy_detection == 0))        if stress == 0            message ='X X X X X X X';        else            message = '!!! WRONG !!!';            error_message_color = settings.LETTER_COLOR_STRESS;        end    else        message ='O O O O O O O O';    endendScreen(win0,'DrawText',message,(settings.SCREEN_X/2)-(3.65*settings.CM),(settings.SCREEN_Y/2)+(settings.CM/3),error_message_color);Screen(win0,'WaitBlanking',settings.REFRESH_RATE/3);% clear the windowsScreen('CopyWindow',winclear,win0);Screen('CopyWindow',winclear,win1);Screen('CopyWindow',winclear,win2);end